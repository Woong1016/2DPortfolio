#pragma once

class Bullet;   // 임시 전방 선언
                // 전방 선언 : 변수처럼 값 없이 (클래스도 내용 없이) 단지 "이런 이름이 있다"는 것까지만
                //             적어두는 것. (컴퓨터가 모르는 이름이라고 오류를 내지 않도록)

class Plane : public Quad // 비행기 (쿼드 상속함)
{
public:

    Plane();
    ~Plane();

    // 없다고 오류가 날 정도는 이제 아니지만... 엄연히 게임 속 사물
    // -> 장차 씬에서 움직이고 보여야 할 대상이므로... 이런 함수가 앞으로 없으면
    //    씬에서 이 비행기를 연산할 수단도 없다. 따라서, 아래 두 함수는
    //    게임에 (씬에) 넣는 물체로서는 필수라고 생각해야 한다.
    void Update();
    void Render();

private:
    // 클래스 안에서 자체로 돌리기 위한 함수
    // 다른 말로 비행기의 -> 행동

    void Move();    // 움직이기
    void Rotate();  // 회전하기
    void Fire();    // (혹시 총알이 있다면) 쏘기

private:    // 변수나 같은 멤버라도 범주를 그때그때 필요하면 재설정한다
            // -> 그게 같은 접근 지정자라도. (의미 공유의 명확함을 위해서)

    // 비행기가 가지고 있어야 할 세부 데이터

    // 형태? : 필요 없다. 쿼드를 상속했으니까 = 자기가 쿼드임.

    // 속력은 필요하다
    float speed = 100.0f;

    // 꼭 필요하진 않지만... 포탑이 별도로 있는 비행기도 있다
    // 그러므로 포탑을 나타낼 데이터 = 또 다른 쿼드를 준비
    
    Quad* turret;   // 쿼드 밑에 똑같은 쿼드를 멤버로 넣는 것 : 가능!

    // 총알 (1개)
    // Bullet* bullet;

    // std::vector<Bullet*> bullets; // 총알+들

    vector<Bullet*> bullets;    // std namespace가 상시 사용중(using namespace std;)
    // -> 위 데이터는 있지만 쓰지는 않는다...


    // 비행기에 연사 능력이 있을 경우 고려할 데이터

    bool canFire;   // 쏠 수 있는가?
    float fireTime; // 사격 후 걸린 시간

    float fireDelay = 0.25f; // 연사에 걸리는 지연 시간 (발사 간격)
};

